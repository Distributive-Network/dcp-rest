<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title></title>
    <meta name="author" content="">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      @font-face {
        font-family: "Proxima Nova";
        src: local("Proxima Nova"), url("/assets/proxima-nova.otf");
      }

      body {
        background: url(https://secure.distributed.computer/assets/background-bluegreen.jpg);
      }

      #reflector-frame-container {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        font-family: "Proxima Nova";
      }

      #reflector-frame-container h1 {
        font-size: 1.23rem;
        margin-bottom: 15px;
        white-space: nowrap;
      }

      #reflector-frame-container p {
        font-size: 0.9rem;
        margin-top: 0;
        margin-bottom: 0;
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }

      #reflector-frame-container #modal {
        background: white;
        padding: 27px 50px;
        width: 70vw;
        align-items: center;
        box-shadow: rgba(0, 0, 0, 0.4) 4px 4px 4px;
        text-align: center;
      }

      #reflector-frame-container #dcp-logo {
        height: 65px;
        margin-bottom: 15px;
      }

      .inlineinput {
        text-align: left;
        position: relative;
        bottom: 16px;
      }

      .inlineinput input,
      .inlineinput select {
        filter: none;
        height: 35px;
        padding: 0.4em 1em 0.2em;
        border: 1px solid #8A8A8A;
        border-radius: 0;
        box-sizing: border-box;
        font-size: 0.9rem;
        min-width: 30vw;
        color: #3a3a3a;
      }

      @media screen and (min-device-width: 800px) {
        .inlineinput input,
        .inlineinput select {
          width: 100%;
        }
      }

      .inlineinput input:focus, .inlineinput select:focus {
        box-shadow: 0 0 0 0.25rem rgba(0, 164, 115, 0.25);
        outline: none;
      }

      .inlineinput input[type=number] {
        color: #1aa473;
        font-weight: bold;
      }

      .inlineinput select option {
        color: black;
      }

      .inlineinput input::placeholder, .inlineinput select:invalid {
        color: #e5e5e5;
      }

      .inlineinput label {
        position: relative;
        display: inline-block;
        background-color: white;
        margin: 0 1.25em 0 0.4em;
        padding: 0 0.75em 0 0.75em;
        font-size: 0.8em;
        line-height: 1em;
        top: 0.85em;
        left: 0.2em;
        color: #8a8a8a;
        z-index: 2;
        text-align: initial;
      }

      select.invalid,
      input.invalid {
        border-color: red;
      }

      .button {
        box-sizing: border-box;
        height: 41px;
        min-width: 8em;
        padding: 10px 2em;
        font-weight: bold;
        background: #1aa473;
        color: white;
        border: 1px solid #1aa473;
        cursor: pointer;
        margin-top: 32px;
        font-size: 0.9rem;
      }

      #allow-permission .button {
        min-width: 0;
        flex: 1;
        padding: 10px 0;
        margin-top: 20px;
      }

      .white {
        background: white;
        border: 1px solid #1aa473;
        color: #1aa473;
      }

      .highlight-green {
        color: #1aa473;
      }

      #reflector-frame-container button:hover {
        background: #6fc495;
      }

      #reflector-frame-container a {
        display: block;
        font-size: 0.8em;
        color: gray;
      }

      #reflector-frame-container a:hover {
        color: #1aa473;
        transition: 200ms;
      }

      #logout {
        position: relative;
        top: 7px;
      }

      #account-select {
        display: none;
      }

      #allow-permission div {
        display: flex;
        flex-direction: row;
        column-gap: 20px;
        justify-content: space-between;
      }

      #allow-permission p {
        margin-bottom: 0;
        white-space: normal;
      }

      @media only screen and (max-width: 600px) {
        #reflector-frame-container #modal {
          width: 100vw;
          height: 100vh;
          padding: 27px 72px;
        }
      }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="<%= scheduler %>/dcp-client/dcp-client.js"></script>
  </head>

  <body>
    <div id="reflector-frame-container">
      <div id="modal">
        <img id="dcp-logo" src="https://secure.distributed.computer/assets/dcp-logo-5db53cc2b8186a6c250379b20bcb5ed4926c433903a3441234f09ea40b3cea65.png">
        <div id="allow-permission">
          <h1>Allow Permission</h1>
          <p>This application is requesting permission to use your account, which includes the ability to withdraw or transfer credits. Select which account you want the app to use.</p>
          <div>
            <button class="button white" onclick="dontAllow();">Don't Allow</button>
            <button class="button" onclick="allow();">Allow</button>
          </div>
        </div>
        <div id="account-select">
          <h1>Here is your API Key</h1>
	  <p><%= userData.token %></p>
          <div id="logout">
            <p>Logged in as<i class="highlight-green"><%= userData.email %></i></p>
            <a href='/signout?token=<%= userData.token %>&proxy=<%= userData.proxy %>'>Not you?</a>
          </div>
        </div>
      </div>
    </div>
    <article
      id="user-data"
      data-keystore="<%= userData.keystore %>"
      data-token="<%= userData.token %>">
    </article>
    <script>
      let newUrl = window.location.href.split('?')[0];
      history.replaceState(null, '', newUrl);

      let ksl;
      const userData = document.querySelector('#user-data').dataset;

      function allow() {
        let accountSelect = document.getElementById('account-select');
        let allowPermission = document.getElementById('allow-permission');
        accountSelect.style.display = 'block';
        allowPermission.style.display = 'none';
      }

      function dontAllow() {
        if (opener) {
          opener.postMessage(false, "*");
        }
        window.close();
      }

      function select() {
          e = document.getElementById('bank_account');
          if(opener) {
            opener.postMessage(ksl[e.selectedIndex], "*");
            window.close();
          } else {
            window.location.replace(`dcpauth://127.0.0.1?ks=${encodeURIComponent(JSON.stringify(ksl[e.selectedIndex]))}`);
          }
      }

      async function unlockKs() {
        const idKs = await new dcp.wallet.IdKeystore(userData.keystore);
        dcp.wallet.addId(idKs);
        idKs.unlock(userData.token, 300, true);
        const portalConnection = new dcp.protocol.Connection(dcpConfig.portal);
        const response = await portalConnection.request('viewKeystores', {});

        if (!response.success)
        {
          console.error(response.payload.message);
          alert(`Error: ${response.payload.message}`);
          return;
        }

        ksl = response.payload;
        accSelect = document.getElementById('bank_account');
        ksl.forEach(acc => {
          const locale = 'en';
          const formatter = new Intl.NumberFormat(locale, { minimumFractionDigits: 3 });
          const accountBalanceString = formatter.format(acc.balance);
          const option = document.createElement('option');

          option.text = `${acc.label}\xa0\xa0\xa0${acc.address.slice(2,8)}\u2026\xa0\xa0\xa0${accountBalanceString}\xa0âŠ‡`;
          accSelect.add(option);
        });
      }
      unlockKs();
    </script>
  </body>
</html>
