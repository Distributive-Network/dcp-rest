/** 
 * Smoke test for the job result endpoint. Deploys a job using
 * dcp-client and gets the results using the dcp-rest.
 */

const dcpClient = require('dcp-client');
const http = require('http');
const assert = require('node:assert/strict');

async function main()
{
  await dcpClient.init();
  const wallet = require('dcp/wallet');
  const compute = require('dcp/compute');

  // deploy a job
  const job = compute.for([1,2,3], (datum) => { progress(); return datum * datum; });
  const resultsPromise = job.localExec();

  // set event listeners
  job.on('readystatechange', console.log);
  job.on('result', console.log);

  // wait for the job to deploy
  const id = await new Promise((resolve, reject) => {
    job.on('accepted', () => { resolve(job.id); }); // resolve when job deployed
    setTimeout(reject, 60 * 1000); // give up if not deployed within 60 seconds
  });

  // attempt to get the results of the job once its been deployed
  console.log(id);
  console.log(await getResults(id));

  //await for the job to complete and check that the results match
  const resultsFromClient = await resultsPromise;
  const resultsFromHttpApi = await getResults(id);

  // print for verbosity
  console.log(resultsFromClient);
  console.log(JSON.parse(resultsFromHttpApi));

  // check that the array lengths are the same
  assert(resultsFromClient.length === JSON.parse(resultsFromHttpApi).results.length);

  // check that the results match!
  for (const apiResult of JSON.parse(resultsFromHttpApi).results)
  {
    const sliceNumber = apiResult['sliceNumber'];
    if (!resultsFromClient[sliceNumber - 1] === apiResult.value)
    {
      console.err('results mismatch between results from job.exec and api call');
      process.exit(13);
    }
  }

  // all tests successful
  console.log('test passed');
  process.exit(0); 
}

async function getResults(jobId)
{
  const wallet = require('dcp/wallet');
  const url = `http://localhost:1234/job/${jobId}/result`;

  const idKeystore = await wallet.getId();
  const passphrase = '';

  const authHeaderCreds = btoa(`${JSON.stringify(idKeystore.toJSON())}:${passphrase}`);
  const authHeader = `Basic ${authHeaderCreds}`;

  console.log(authHeader);
  console.log(atob(authHeaderCreds))

  return httpsGetWithAuth(url, authHeader);
}

function httpsGetWithAuth(url, authHeader)
{
  return new Promise((resolve, reject) => {
    const options = {
      headers: {
        'Authorization': authHeader
      }
    };

    http.get(url, options, (response) => {
      let data = '';

      // A chunk of data has been received.
      response.on('data', (chunk) => {
        data += chunk;
      });

      // The whole response has been received. Print out the result.
      response.on('end', () => {
        resolve(data);
      });

    }).on("error", (err) => {
      reject(err);
    });
  });
}

main();

